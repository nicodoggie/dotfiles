" Autoload .vimrc on save
augroup myvimrchooks
    au!
    autocmd bufwritepost .vim/vimrc source ~/.vim/vimrc
augroup END

" General Configuration
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=4
set clipboard=unnamed
set number

set spelllang=en
set spellfile=$HOME/.vim/spellfile/en.utf-8.add
set spell 

augroup txtspell
  autocmd!
  autocmd FileType markdown,mkd setlocal spell
  autocmd FileType text         setlocal spell
  autocmd BufRead,BufNewFile *.md setlocal spell
  autocmd BufRead,BufNewFile .gitignore setlocal nospell
augroup END

nmap \s i<C-X><C-S>

nnoremap k gk
nnoremap j gj

nnoremap <Up> gk
nnoremap <Down> gj

" remap clipboard yank
noremap ,y "+yy
noremap ,p "+p

" Installed Plugins
call plug#begin("~/.vim/bundle")
Plug 'NLKNguyen/papercolor-theme'
Plug 'itchyny/lightline.vim'

Plug 'maralla/completor.vim'

Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.vim'
Plug 'vim-scripts/Drawit'


Plug 'gisphm/vim-gitignore'
Plug 'tpope/vim-fugitive'

Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }

Plug 'scrooloose/nerdcommenter'

Plug 'mbbill/undotree'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'reedes/vim-pencil'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'roxma/vim-tmux-clipboard'
Plug 'chrisbra/vim-autosave'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'ctrlpvim/ctrlp.vim'
call plug#end()


" Autocomplete Options
let g:completor_node_binary = "/usr/bin/node"

" Theme options
set background=dark
colorscheme PaperColor

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default.dark': { 
  \       'allow_bold' : 1,
  \       'allow_italic' : 1
  \     }
  \   }
  \ }

" Markdown Preview
nmap gm <Plug>MarkdownPreview

" Lightline config
let g:lightline = { 
  \   'colorscheme': 'PaperColor',
  \   'active': {
  \     'left': [ [ 'mode', 'paste' ],
  \             [ 'readonly', 'filename', 'modified', 'fugitive', 'pencil' ] ]
  \   },
  \   'component': { 
  \     'pencil': '%{PencilMode()}',
  \     'fugitive': '%{FugitiveStatusline()}'
  \   }
  \ }

set laststatus=2

" Goyo
map go :Goyo<CR>

let g:goyo_width = '75%'
let g:goyo_height = '90%'

function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set showmode
  set noshowcmd
  set linebreak
  set scrolloff=999
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set noshowmode
  set showcmd
  set scrolloff=5
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Tabs
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>

" NERDTree
map <C-o> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() = 1 && isdirectory(argv()[0]) && '!exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd | ene | endif

" Ctrlp
let g:ctrlp_cmd='CtrlP :pwd'

" ftplugin
filetype plugin on

" vim-markdown
let g:vim_markdown_new_list_item_indent = 0

" Pencil
let g:pencil#mode_indicators = {'hard': 'üñâ‚êç', 'auto': 'üñâ¬™', 'soft': 'üñâ‚§∏', 'off': '',}

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END

set conceallevel=3
hi clear SpellBad
hi SpellBad cterm=strikethrough
set wrap linebreak nolist
